ADV-103算法提高 逆序排列  
时间限制：1.0s   内存限制：512.0MB
关键字 循环语句 数组操作
问题描述
　　编写一个程序，读入一组整数（不超过20个），并把它们保存在一个整型数组中。当用户输入0时，表示输入结束。然后程序将把这个数组中的值按逆序重新存放，并打印出来。例如：假设用户输入了一组数据：7 19 -5 6 2 0，那么程序将会把前五个有效数据保存在一个数组中，即7 19 -5 6 2，然后把这个数组中的值按逆序重新存放，即变成了2 6 -5 19 7，然后把它们打印出来。
　　输入格式：输入只有一行，由若干个整数组成，中间用空格隔开，最末尾的整数为0。
　　输出格式：输出也只有一行，即逆序排列后的整数，中间用空格隔开，末尾没有空格。
　　输入输出样例
样例输入
7 19 -5 6 2 0
样例输出
2 6 -5 19 7
------------------------------------------------------------------------------------------------------------------
ADV-100算法提高 第二大整数  
时间限制：1.0s   内存限制：512.0MB
关键字 逻辑判断 循环语句
问题描述
　　编写一个程序，读入一组整数（不超过20个），当用户输入0时，表示输入结束。然后程序将从这组整数中，把第二大的那个整数找出来，并把它打印出来。说明：（1）0表示输入结束，它本身并不计入这组整数中。（2）在这组整数中，既有正数，也可能有负数。（3）这组整数的个数不少于2个。
　　输入格式：输入只有一行，包括若干个整数，中间用空格隔开，最后一个整数为0。
　　输出格式：输出第二大的那个整数。
　　输入输出样例
样例输入
5 8 -12 7 0
样例输出
7
-------------------------------------------------------------------------------------------------------------------
ADV-98算法提高 约数个数  
时间限制：1.0s   内存限制：512.0MB
输入一个正整数N (1
样例输入
12
样例输出
6
样例说明
12的约数包括：1,2,3,4,6,12。共6个

参考代码：
-------------------------------------------------------------------------------------------------------------------
ADV-97算法提高 十进制数转八进制数  
时间限制：1.0s   内存限制：512.0MB
编写函数，其功能为把一个十进制数转换为其对应的八进制数。程序读入一个十进制数，调用该函数实现数制转换后，输出对应的八进制数。
样例输入
9274
样例输出
22072
样例输入
18
样例输出
22
参考代码：
-------------------------------------------------------------------------------------------------------------------
ADV-94算法提高 复数归一化  
时间限制：1.0s   内存限制：512.0MB
编写函数Normalize，将复数归一化，即若复数为a+bi，归一化结果为a/sqrt(a*a+b*b) + i*b/sqrt(a*a+b*b) 。使用结构体指针类型作为函数参数可能是必要的。其中实部和虚部由键盘输入，输出为归一化结果，如果归一化结果的实部或虚部为小数的要求保留一位小数。
　　样例输入:（格式说明：3 4 分别为以空格隔开的实数的实部和虚部）
　　3 4
样例输出
0.6+0.8i
样例输入
2 5
样例输出
0.4+0.9i
参考代码：
-------------------------------------------------------------------------------------------------------------------
ADV-15算法提高 最大乘积  
时间限制：1.0s   内存限制：512.0MB
问题描述
　　对于n个数，从中取出m个数，如何取使得这m个数的乘积最大呢？
输入格式
　　第一行一个数表示数据组数
　　每组输入数据共2行：
　　第1行给出总共的数字的个数n和要取的数的个数m，1<=n<=m<=15，
　　第2行依次给出这n个数，其中每个数字的范围满足:a[i]的绝对值小于等于4。
输出格式
　　每组数据输出1行，为最大的乘积。
样例输入
15 51 2 3 4 5
样例输出
120
参考代码：
-------------------------------------------------------------------------------------------------------------------
 ADV-5算法提高 最小方差生成树  
时间限制：1.0s   内存限制：256.0MB
关键字 最小生成树
问题描述
给定带权无向图，求出一颗方差最小的生成树。
输入格式
输入多组测试数据。第一行为N,M，依次是点数和边数。接下来M行，每行三个整数U,V,W，代表连接U,V的边，和权值W。保证图连通。n=m=0标志着测试文件的结束。
输出格式
对于每组数据，输出最小方差，四舍五入到0.01。输出格式按照样例。
样例输入
4 5
1 2 1
2 3 2
3 4 2
4 1 1
2 4 3
4 6
1 2 1
2 3 2
3 4 3
4 1 1
2 4 3
1 3 3
0 0
样例输出
Case 1: 0.22
Case 2: 0.00
数据规模与约定
1<=U,V<=N<=50,N-1<=M<=1000,0<=W<=50。数据不超过5组。
-------------------------------------------------------------------------------------------------------------------
 ADV-4算法提高 道路和航路  
时间限制：1.0s   内存限制：256.0MB
关键字 最短路
问题描述
农夫约翰正在针对一个新区域的牛奶配送合同进行研究。他打算分发牛奶到T个城镇（标号为1..T），这些城镇通过R条标号为（1..R）的道路和P条标号为（1..P）的航路相连。
每一条公路i或者航路i表示成连接城镇Ai（1<=A_i<=T）和Bi（1<=Bi<=T）代价为Ci。每一条公路，Ci的范围为0<=Ci<=10,000；由于奇怪的运营策略，每一条航路的Ci可能为负的，也就是-10,000<=Ci<=10,000。
每一条公路都是双向的，正向和反向的花费是一样的，都是非负的。
每一条航路都根据输入的Ai和Bi进行从Ai->Bi的单向通行。实际上，如果现在有一条航路是从Ai到Bi的话，那么意味着肯定没有通行方案从Bi回到Ai。
农夫约翰想把他那优良的牛奶从配送中心送到各个城镇，当然希望代价越小越好，你可以帮助他嘛？配送中心位于城镇S中（1<=S<=T）。
输入格式
输入的第一行包含四个用空格隔开的整数T，R，P，S。
接下来R行，描述公路信息，每行包含三个整数，分别表示Ai，Bi和Ci。
接下来P行，描述航路信息，每行包含三个整数，分别表示Ai，Bi和Ci。
输出格式
输出T行，分别表示从城镇S到每个城市的最小花费，如果到不了的话输出NO PATH。
样例输入
6 3 3 4
1 2 5
3 4 5
5 6 10
3 5 -100
4 6 -100
1 3 -10
样例输出
NO PATH
NO PATH
5
0
-95
-100
数据规模与约定
对于20%的数据，T<=100，R<=500，P<=500；
对于30%的数据，R<=1000，R<=10000，P<=3000；
对于100%的数据，1<=T<=25000，1<=R<=50000，1<=P<=50000。
参考代码：
-------------------------------------------------------------------------------------------------------------------
ADV-3算法提高 金属采集  
时间限制：1.0s   内存限制：256.0MB
关键字 树形动态规划
问题描述
人类在火星上发现了一种新的金属！这些金属分布在一些奇怪的地方，不妨叫它节点好了。一些节点之间有道路相连，所有的节点和道路形成了一棵树。一共有 n 个节点，这些节点被编号为 1~n 。人类将 k 个机器人送上了火星，目的是采集这些金属。这些机器人都被送到了一个指定的着落点， S 号节点。每个机器人在着落之后，必须沿着道路行走。当机器人到达一个节点时，它会采集这个节点蕴藏的所有金属矿。当机器人完成自己的任务之后，可以从任意一个节点返回地球。当然，回到地球的机器人就无法再到火星去了。我们已经提前测量出了每条道路的信息，包括它的两个端点 x 和 y，以及通过这条道路需要花费的能量 w 。我们想花费尽量少的能量采集所有节点的金属，这个任务就交给你了。
输入格式
第一行包含三个整数 n, S 和 k ，分别代表节点个数、着落点编号，和机器人个数。
接下来一共 n-1 行，每行描述一条道路。一行含有三个整数 x, y 和 w ，代表在 x 号节点和 y 号节点之间有一条道路，通过需要花费 w 个单位的能量。所有道路都可以双向通行。
输出格式
输出一个整数，代表采集所有节点的金属所需要的最少能量。
样例输入
6 1 3
1 2 1
2 3 1
2 4 1000
2 5 1000
1 6 1000
样例输出
3004
样例说明
所有机器人在 1 号节点着陆。
第一个机器人的行走路径为 1->6 ，在 6 号节点返回地球，花费能量为1000。
第二个机器人的行走路径为 1->2->3->2->4 ，在 4 号节点返回地球，花费能量为1003。
第一个机器人的行走路径为 1->2->5 ，在 5 号节点返回地球，花费能量为1001。
数据规模与约定
本题有10个测试点。
对于测试点 1~2 ， n <= 10 ， k <= 5 。
对于测试点 3 ， n <= 100000 ， k = 1 。
对于测试点 4 ， n <= 1000 ， k = 2 。
对于测试点 5~6 ， n <= 1000 ， k <= 10 。
对于测试点 7~10 ， n <= 100000 ， k <= 10 。
道路的能量 w 均为不超过 1000 的正整数。
参考代码：
-------------------------------------------------------------------------------------------------------------------